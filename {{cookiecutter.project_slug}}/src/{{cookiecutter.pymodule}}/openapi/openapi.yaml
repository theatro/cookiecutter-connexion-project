openapi: 3.0.2
info:
  title: "{{ cookiecutter.project_name }}"
  description: |
    {{ cookiecutter.project_short_description }}
  version: "{{ cookiecutter.version }}"

servers:
  - url: 'https://api.example.com'

security:
  # Make sure to delete this example and insert proper security
  - example_auth: []

# x-audience is like "security" in that it acts like an override: global > path > operation > parameter
x-audience: [internal] # globally internal-only by default.

paths:
  # /things demonstrates overriding the x-audiences (internal only by default)
  # and then locking back down a parameter and an operation
  /things:
    get:
      x-audience: [internal, customer] # path-level override example
      summary: An example endpoint
      description: Please replace this endpoint with a real endpoint.
      parameters:
        - name: INTERNAL-BEHAVIORAL-HEADER
          in: header
          x-audience: [internal] # parameter-level override example
      responses:
        '200':
          description: OK
        '404':
          description: Example Not Found Problem
          content:
            application/problem+json:
              x-problems:
                - $ref: '#/x-problems/ThingNotFound'
              schema: {$ref: 'https://zalando.github.io/problem/schema.yaml#/Problem'}
    post:
      x-audience: [internal] # operation-level
      responses:
        '200':
          description: OK

# One of the benefits of defining the problems outside of definitions or components, is that it avoids generating models for the error messages.
# A problem is defined at:
#   - https://opensource.zalando.com/restful-api-guidelines/#176
#   - https://opensource.zalando.com/problem/schema.yaml#/Problem
# Server-side java should use:
#   - https://github.com/zalando/problem
#   - https://github.com/zalando/problem-spring-web
# Standard properties: type, title, status, detail, instance
# These problem definitions define the required extra properties
x-problems:
# ProblemName:
#   title: Error - Problem Title Here
#   status: HTTP Status
#   custom-properties: the schema for any custom properties
#   example: minimal example that does not include all standard properties (partially defined above)
#   examples: may contain multiple named examples (use only example OR examples, not both)
#     ExampleName:
  ThingNotFound:
    title: Thing Not Found
    status: 404
    custom-properties:
      chain:
        description: The requested thing
        type: string
        example: MissingThing
    example:
      detail: Thing
      extravar: extravalue

# The API "audience" determines which operations/parameters should be included in the generated client SDKs.
# x-audience only affects inclusion of request details and definitions/models. Server responses do not change.
x-audiences:
  - name: internal
    description: For internal use only.
  - name: customer
    description: Available to customers (for things like ERP integrations)

components:
  # WARNINGS:
  #  - All components that become models must be objects because they python client generator doesn't support other types.
  #  - Definition names should be title case, even for acronyms
  #    as the python client converts them to snake_case, assuming each capital letter starts a new word

  # schemas:

  securitySchemes:
    # connexion-based servers need additional info in one or more of these:
    #   x-tokenInfoFunc:
    #   x-scopeValidateFunc:
    #   x-basicInfoFunc:
    #   x-apikeyInfoFunc:
    #   x-bearerInfoFunc:
    # name should be based on the name generated by openapi-generator:
    #   {{ cookiecutter.pymodule }}.web.controllers.security_controller_.info_from_<name>

    example_auth:
      description: Example of a basic scheme (Delete this!)
      scheme: basic
      type: http
      x-basicInfoFunc: {{ cookiecutter.pymodule }}.web.controllers.security_controller_.info_from_example_auth
